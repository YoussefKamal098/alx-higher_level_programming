The ``7-base_geometry`` module
============================

Using ``BaseGeometry``
---------------------

Import function from module:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Test Case 0: Correct Class Type test:
    >>> bg = BaseGeometry()
    >>> type(bg) == BaseGeometry
    True

area() instance method
----------------------
Test Case 1: Area method is an instance method:
    >>> type(BaseGeometry.__dict__['area'])
    <class 'function'>

Test Case 2: Area method called via class with no args:
    >>> bg.__class__.area()
    Traceback (most recent call last):
    TypeError: area() missing 1 required positional argument: 'self'

Test Case 3: Area method args test (1 arg):
    >>> bg.area(10)
    Traceback (most recent call last):
    TypeError: BaseGeometry.area() takes 1 positional argument but 2 were given

Test Case 4: Area method normal test:
    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented


integer_validator() instance method
-----------------------------------
Test Case 5: Integer_validator is an instance method:
    >>> type(BaseGeometry.__dict__['integer_validator'])
    <class 'function'>

Test Case 6: Integer_validator method called via class with no args:
    >>> bg.__class__.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 3 required positional arguments: 'self', 'name', and 'value'

Test Case 7: Integer_validator method arg test (0 args):
    >>> bg.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Test Case 8: Integer_validator method arg test (3 args):
    >>> bg.integer_validator(1, 2, 3)
    Traceback (most recent call last):
    TypeError: integer_validator() takes 3 positional arguments but 4 were given

Test Case 9: Integer_validator method float.0 value:
    >>> bg.integer_validator("foo", 4.0)
    Traceback (most recent call last):
    TypeError: foo must be an integer

Test Case 10: Integer_validator method float.x value:
    >>> bg.integer_validator("foo", 3.14)
    Traceback (most recent call last):
    TypeError: foo must be an integer

Test Case 11: Integer_validator method string value:
    >>> bg.integer_validator("foo", "bar")
    Traceback (most recent call last):
    TypeError: foo must be an integer

Test Case 12: Integer_validator method bool value:
    >>> bg.integer_validator("foo", True)
    Traceback (most recent call last):
    TypeError: foo must be an integer

Test Case 13: Integer_validator method list value:
    >>> bg.integer_validator("foo", [1, 2])
    Traceback (most recent call last):
    TypeError: foo must be an integer

Test Case 14: Integer_validator method None value:
    >>> bg.integer_validator("foo", None)
    Traceback (most recent call last):
    TypeError: foo must be an integer

Test Case 15: Integer_validator method 0 value:
    >>> bg.integer_validator("key", 0)
    Traceback (most recent call last):
    ValueError: key must be greater than 0

Test Case 16: Integer_validator method negative value:
    >>> bg.integer_validator("key", -200)
    Traceback (most recent call last):
    ValueError: key must be greater than 0

Test Case 17: Integer_validator method ok value:
    >>> bg.integer_validator("key", 100)

Test Case 18: Integer_validator method ok value 2:
    >>> bg.integer_validator("key", 2)

Test Case 19: Integer_validator method empty string:
    >>> bg.integer_validator("", 2)

Test Case 20: Integer_validator method empty string:
    >>> bg.integer_validator(None, 2)

Test Case 21: Integer_validator method tuple:
    >>> bg.integer_validator("Foo", (2, 4))
    Traceback (most recent call last):
    TypeError: Foo must be an integer

Test Case 22: Integer_validator method dic:
    >>> bg.integer_validator("Foo", {2, 4})
    Traceback (most recent call last):
    TypeError: Foo must be an integer

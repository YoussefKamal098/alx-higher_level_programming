The ``1-my_list`` module
============================

Using ``1-mylist``
---------------------

Import function from module:
    >>> MyList = __import__('1-my_list').MyList

Test Case 1: Correct Class Type test:
    >>> ml = MyList()
    >>> type(ml) == MyList
    True

Test Case 2: Correct Instance test:
    >>> ml = MyList()
    >>> isinstance(ml, list)
    True

Test Case 3: print_sorted method is an instance method:
    >>> type(MyList.__dict__['print_sorted'])
    <class 'function'>

Test Case 4: print_sorted method called via class with no args:
    >>> ml.__class__.print_sorted()
    Traceback (most recent call last):
    TypeError: print_sorted() missing 1 required positional argument: 'self'

Test Case 5: print_sorted method called with 1 arg:
    >>> ml.print_sorted([1, 2, 3])
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given

Test Case 6: print_sorted method called with 2 args:
    >>> ml.print_sorted([1, 2, 3], 1)
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 3 were given

Test Case 7: Empty list test:
    >>> ml = MyList()
    >>> ml.print_sorted()
    []

Test Case 8: Normal list test:
    >>> ml = MyList([2, 5, 1])
    >>> ml.print_sorted()
    [1, 2, 5]

Test Case 9: Normal list test 2:
    >>> ml = MyList([0, 4, 2, 3, 8])
    >>> ml.print_sorted()
    [0, 2, 3, 4, 8]

Test Case 10: Negative ints list test:
    >>> ml = MyList([-1000, -98, -232565, 0, -23423434, -123])
    >>> ml.print_sorted()
    [-23423434, -232565, -1000, -123, -98, 0]

Test Case 11: Original list unchanged:
    >>> ml = MyList([2, 10, 1, -20, 20, 200, 0])
    >>> ml.print_sorted()
    [-20, 0, 1, 2, 10, 20, 200]
    >>> ml
    [2, 10, 1, -20, 20, 200, 0]

Test Case 12: List already in order:
    >>> ml = MyList([-20, 0, 1, 2, 20, 50, 200])
    >>> ml.print_sorted()
    [-20, 0, 1, 2, 20, 50, 200]

Test Case 13: Test append:
    >>> ml = MyList()
    >>> ml.append(9)
    >>> ml
    [9]
